export const transactionsHints = {
  hash: 'Unique identifier of the transaction.',
  created: 'Estimated date, time, and block height when the transaction has been send.',
  type: 'Every transaction in Aeternity ecosystem has its own type depending on its purpose',
  spendTx: 'Basic transaction to transfer tokens.',
  contractCallTx: 'Transaction that dispatch the call to the existing contract.',
  contractCreateTx: 'Transaction that creates the contract.',
  oracleRegisterTx: 'Transaction that register an existing account as an oracle.',
  oracleQueryTx: 'Transaction that creates an oracle interaction.',
  oracleRespondTx: 'The oracle operator responds to a query by posting an oracle response transaction.',
  oracleExtendTx: 'An oracle operator can extend the TTL of an existing oracle.',
  namePreclaimTx: 'transaction starts the claiming process.',
  nameClaimTx: 'The claim transaction, apart from standard transaction fee, locks additional fee in a restricted account',
  nameUpdateTx: 'update transaction may be used to extend the lease of the name',
  nameTransferTx: 'The transfer transaction MUST be signed by the owner of the name entry to be transfered.',
  nameRevokeTx: 'he name enters the revoked state. After a fixed timeout of 2016 blocks, the name will be available for claiming again.',
  channelCreateTx: 'The channel_create_tx transaction is used to register a channel on-chain and its inclusion on-chain causes the specified amounts to be locked up as a guarantee that participants have a vested interest in the channel.',
  channelDepositTx: 'Depositing funds into a channel after its creation provides the means for a participant to move coins from the participant\'s balance to the channel\'s one.',
  channelWithdrawTx: 'Channels should generally not be used to hold significant amounts of coins but being able to withdraw locked coins might still be of use.',
  channelCloseMutualTx: 'initiator_amount_final and responder_amount_final are the agreed upon distribution of coins out of the channel total balance of coins.',
  channelCloseSoloTx: 'In order to close a channel unilaterally, a participant has to send a channel_close_solo transaction. . In the case of a solo closing, operations are subject to the lock_period.',
  channelSlashTx: 'which the closing state can be disputed via a channel_slash_tx.',
  channelSettleTx: 'The settlement transaction is the last one in the lifecycle of a channel, but only required if the parties involved did not manage to cooperate when trying to close the channel. It has to be issued after all possible disputes are resolved to then redistribute the locked coins.',
  channelSnapshotSoloTx: 'Snapshots provide a recent off-chain state to be recorded on-chain.',
  channelForceProgressTx: 'If this transaction is sent while the channel is in the closing state, it will transition the channel into the locked state for the next lock_period blocks.',
  channelGAAttachTx: 'The ga_attach_tx is used to convert a POA into a GA by attaching code to it. Afterwards the new meta_tx is used to interact with the GA.',
  channelGAMetaTx: 'meta_tx, that wraps transaction data into a smart contract call. meta_tx, that wraps a "normal" transaction with auth_data for a generalized account',
  payingForTx: 'Transaction that will cover the fees for another user. It wraps any kind of other transaction types',
}
