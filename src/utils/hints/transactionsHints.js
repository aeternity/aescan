export const transactionsHints = {
  hash: 'Unique identifier of the transaction.',
  created: 'Block height and estimated date and time when the transaction has been sent.',
  type: 'The type of the transaction depends on its purpose in the Ã†ternity ecosystem.',
  spendTx: 'Basic transfer of tokens.',
  contractCallTx: 'Calls the functions of the existing contract.',
  contractCreateTx: 'Creates the contract.',
  oracleRegisterTx: 'Registers an existing account as the Oracle.',
  oracleQueryTx: 'Interacts with an Oracle.',
  oracleRespondTx: 'The Oracle operator responds to a query by posting an Oracle response transaction.',
  oracleExtendTx: 'Extend the TTL of an existing Oracle by the Oracle operator.',
  namePreclaimTx: 'Starts the Name claiming process.',
  nameClaimTx: 'Claims the Name. It locks additional fees in a restricted account apart from the standard transaction fee.',
  nameUpdateTx: 'Extends the lease of the Name.',
  nameTransferTx: 'Transfers the Name ownership.',
  nameRevokeTx: 'Changes the Name to the revoked state. After a fixed timeout of 2016 blocks, the Name will be available for claiming again.',
  channelCreateTx: 'Registers a channel on-chain and its inclusion.',
  channelDepositTx: 'Deposits funds into the channel. The participant moves coins from the participant\'s balance to the channel\'s one.',
  channelWithdrawTx: 'Withdraws locked coins.',
  channelCloseMutualTx: 'Transaction of initiator and responder that agreed upon distribution of coins out of the channel.',
  channelCloseSoloTx: 'Closes the channel unilaterally. In the case of a solo closing, operations are subject to the "lock_period".',
  channelSlashTx: 'Disputes closing channel.',
  channelSettleTx: 'The last transaction in the lifecycle of a channel, but only required if the parties involved did not manage to cooperate to close the channel. It has to be issued after all possible disputes are resolved and then redistribute the locked coins.',
  channelSnapshotSoloTx: 'Provides a snapshot of the recent off-chain state to be recorded on-chain.',
  channelForceProgressTx: 'Transition the channel into the locked state for the next "lock_period" blocks.',
  gAAttachTx: 'Converts Plain Account into a Generalized Account by attaching code to it. Then the new "meta_tx" is used to interact with the Generalized Account.',
  gAMetaTx: 'Wraps transaction data into a smart contract call. For a Generalized Account it wraps a "normal" transaction with "auth_data".',
  payingForTx: 'Covers the fees for another user. It wraps any kind of other transaction types.',
}
